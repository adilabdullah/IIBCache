BROKER SCHEMA FundsTransferIBFT


CREATE COMPUTE MODULE FundsTransferIBFT_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		
		
		SET OutputRoot = InputRoot;
		
		SET OutputRoot.Properties.MessageSet = '{PHXGDCILib}';
		SET OutputRoot.Properties.MessageType = '{}:GDCI_IBFT_Request';
		
		
		
		DECLARE xy CHARACTER;
		SET xy = '000000000000';
		DECLARE t,le INT;
		SET t=0;
		
		SET OutputRoot.Properties.MessageSet = '{PHXGDCILib}';
		SET OutputRoot.Properties.MessageType = '{}:GDCI_IBFT_Request';
		
		
		SET OutputRoot.DFDL.GDCI_IBFT_Request.TransactionRequestHeader.MessageProtocol = InputRoot.DFDL.GDCI_IBFT_Request.TransactionRequestHeader.MessageProtocol;
		SET OutputRoot.DFDL.GDCI_IBFT_Request.TransactionRequestHeader.Version = InputRoot.DFDL.GDCI_IBFT_Request.TransactionRequestHeader.Version;
		SET OutputRoot.DFDL.GDCI_IBFT_Request.TransactionRequestHeader.FieldInError = InputRoot.DFDL.GDCI_IBFT_Request.TransactionRequestHeader.FieldInError;
		SET OutputRoot.DFDL.GDCI_IBFT_Request.TransactionRequestHeader.MessageType = InputRoot.DFDL.GDCI_IBFT_Request.TransactionRequestHeader.MessageType;
		
		--SET OutputRoot.DFDL.GDCI_IBFT_Request.TransactionRequestHeader.TransmissionDateTime = InputRoot.DFDL.GDCI_IBFT_Request.TransactionRequestHeader.TransmissionDateTime;
		SET OutputRoot.DFDL.GDCI_IBFT_Request.TransactionRequestHeader.TransmissionDateTime = CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyyMMddHHmmss');
		
		SET OutputRoot.DFDL.GDCI_IBFT_Request.TransactionRequestHeader.DeliveryChannelType = InputRoot.DFDL.GDCI_IBFT_Request.TransactionRequestHeader.DeliveryChannelType;
		SET OutputRoot.DFDL.GDCI_IBFT_Request.TransactionRequestHeader.DeliveryChannelID = InputRoot.DFDL.GDCI_IBFT_Request.TransactionRequestHeader.DeliveryChannelID;
		SET OutputRoot.DFDL.GDCI_IBFT_Request.TransactionRequestHeader.CustomerID = InputRoot.DFDL.GDCI_IBFT_Request.TransactionRequestHeader.CustomerID;
		SET OutputRoot.DFDL.GDCI_IBFT_Request.TransactionRequestHeader.TransactionCode = InputRoot.DFDL.GDCI_IBFT_Request.TransactionRequestHeader.TransactionCode;
		--SET OutputRoot.DFDL.GDCI_IBFT_Request.TransactionRequestHeader.TransactionDate = InputRoot.DFDL.GDCI_IBFT_Request.TransactionRequestHeader.TransactionDate;
		SET OutputRoot.DFDL.GDCI_IBFT_Request.TransactionRequestHeader.TransactionDate = CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyyMMdd');
		--SET OutputRoot.DFDL.GDCI_IBFT_Request.TransactionRequestHeader.TransactionTime = InputRoot.DFDL.GDCI_IBFT_Request.TransactionRequestHeader.TransactionTime;
		SET OutputRoot.DFDL.GDCI_IBFT_Request.TransactionRequestHeader.TransactionTime = CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'HHmmss');
		SET OutputRoot.DFDL.GDCI_IBFT_Request.TransactionRequestHeader.RetrivevalReferenceNumber = InputRoot.DFDL.GDCI_IBFT_Request.TransactionRequestHeader.RetrivevalReferenceNumber;
		
		
		SET OutputRoot.DFDL.GDCI_IBFT_Request.TransactionRequestHeader.CustomerPINData = InputRoot.DFDL.GDCI_IBFT_Request.TransactionRequestHeader.CustomerPINData;
		SET OutputRoot.DFDL.GDCI_IBFT_Request.TransactionRequestHeader.AgentID = InputRoot.DFDL.GDCI_IBFT_Request.TransactionRequestHeader.AgentID;
		SET OutputRoot.DFDL.GDCI_IBFT_Request.TransactionRequestHeader.ChannelSpecificDataField = InputRoot.DFDL.GDCI_IBFT_Request.TransactionRequestHeader.ChannelSpecificDataField;
		SET OutputRoot.DFDL.GDCI_IBFT_Request.TransactionRequestHeader.ChannelPrivateData = InputRoot.DFDL.GDCI_IBFT_Request.TransactionRequestHeader.ChannelPrivateData;
		SET OutputRoot.DFDL.GDCI_IBFT_Request.TransactionRequestHeader.AuthorizationResponseID = InputRoot.DFDL.GDCI_IBFT_Request.TransactionRequestHeader.AuthorizationResponseID;
		SET OutputRoot.DFDL.GDCI_IBFT_Request.TransactionRequestHeader.ResponseCode = InputRoot.DFDL.GDCI_IBFT_Request.TransactionRequestHeader.ResponseCode;
		
		
		SET OutputRoot.DFDL.GDCI_IBFT_Request.body.FromAccountBankIMD = InputRoot.DFDL.GDCI_IBFT_Request.body.FromAccountBankIMD;
		SET OutputRoot.DFDL.GDCI_IBFT_Request.body.FromAccountNumber = InputRoot.DFDL.GDCI_IBFT_Request.body.FromAccountNumber;
		SET OutputRoot.DFDL.GDCI_IBFT_Request.body.FromAccountType = InputRoot.DFDL.GDCI_IBFT_Request.body.FromAccountType;
		SET OutputRoot.DFDL.GDCI_IBFT_Request.body.FromAccountCurrency = InputRoot.DFDL.GDCI_IBFT_Request.body.FromAccountCurrency;
		SET OutputRoot.DFDL.GDCI_IBFT_Request.body.ToAccountBankIMD = InputRoot.DFDL.GDCI_IBFT_Request.body.ToAccountBankIMD;
		SET OutputRoot.DFDL.GDCI_IBFT_Request.body.ToAccountDetals = InputRoot.DFDL.GDCI_IBFT_Request.body.ToAccountDetals;
		--SET OutputRoot.DFDL.GDCI_IBFT_Request.body.TransactionAmount = InputRoot.DFDL.GDCI_IBFT_Request.body.transactionAmount;
		DECLARE valueafter CHARACTER;
		DECLARE valuebefore CHARACTER;
		IF CONTAINS(InputRoot.DFDL.GDCI_IBFT_Request.body.TransactionAmount, '.') = TRUE THEN
			
			SET valueafter = SUBSTRING(InputRoot.DFDL.GDCI_IBFT_Request.body.TransactionAmount AFTER '.');
			SET valuebefore = SUBSTRING(InputRoot.DFDL.GDCI_IBFT_Request.body.TransactionAmount BEFORE '.');
			
			IF (LENGTH(valueafter) > 2) OR (LENGTH(valueafter) = 2) THEN
				SET valueafter = SUBSTRING (valueafter FROM 1 FOR 2);
			ELSE 
				SET valueafter = valueafter || '0';
			END IF;	
			
			SET OutputRoot.DFDL.GDCI_IBFT_Request.body.TransactionAmount = valuebefore || '.';
			SET OutputRoot.DFDL.GDCI_IBFT_Request.body.TransactionAmount = OutputRoot.DFDL.GDCI_IBFT_Request.body.TransactionAmount || valueafter;
			
		ELSE
			SET OutputRoot.DFDL.GDCI_IBFT_Request.body.TransactionAmount = InputRoot.DFDL.GDCI_IBFT_Request.body.TransactionAmount || '00';
		END IF;
		
		SET OutputRoot.DFDL.GDCI_IBFT_Request.body.TransactionCurrency = InputRoot.DFDL.GDCI_IBFT_Request.body.TransactionCurrency;
		SET OutputRoot.DFDL.GDCI_IBFT_Request.body.TransactionFee = InputRoot.DFDL.GDCI_IBFT_Request.body.TransactionFee;
		
		
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
