BROKER SCHEMA PHXLogging


CREATE COMPUTE MODULE PHXMsgLog_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		
		DECLARE rc BOOLEAN;
		CALL initLog4j('brokerlog.xml') into rc;
		IF ( rc = FALSE ) THEN	
			SET Environment.Variables.RequestLoggingError='Error';
		END IF;
		
		IF InputRoot.BLOB.BLOB IS NOT NULL THEN
			
		CALL log4j_1_1( Environment.Variables.MsgName || ' - ' || Environment.Variables.RequestID, 'PHX_LOGGER','INFO',
		CAST(InputRoot.BLOB.BLOB AS CHARACTER)
		) INTO rc;
		
		ELSE
			CALL log4j_1_1( Environment.Variables.MsgName || ' - ' || Environment.Variables.RequestID, 'PHX_LOGGER','INFO',
			CAST( ASBITSTREAM(InputBody CCSID 1208 ENCODING 546) AS CHARACTER CCSID 1208)
			) INTO rc;
			
		END IF;
		
		
		DECLARE ExceptionMessage character;
		SET ExceptionMessage = ' ';
		CALL ComposeDetails(InputExceptionList,ExceptionMessage);
		
		
		DECLARE len INT;
		SET len = LENGTH (ExceptionMessage);
		
		IF (len > 10) THEN
			SET ExceptionMessage = SUBSTRING (ExceptionMessage FROM 2 FOR ( LENGTH(ExceptionMessage) - 1) );
			CALL log4j_1_1(Environment.Variables.MsgName || ' - ' || Environment.Variables.RequestID, 'PHX_LOGGER', 'ERROR',ExceptionMessage) INTO rc;
		END IF;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
	
	CREATE FUNCTION initLog4j( IN CONFIG_FILE_NAME CHARACTER )
		RETURNS BOOLEAN
		LANGUAGE JAVA
	EXTERNAL NAME "com.ibm.broker.IAM3.Log4jNode.initLog4j";
		
	CREATE FUNCTION log4j_1_1( IN COMPONENT_NAME CHARACTER,
		IN LOGGER_NAME CHARACTER,
		IN LEVEL CHARACTER,
		IN TEXT CHARACTER )
		RETURNS BOOLEAN
		LANGUAGE JAVA
	EXTERNAL NAME "com.ibm.broker.IAM3.Log4jNode.log";
	
	CREATE PROCEDURE ComposeDetails(IN root REFERENCE,INOUT concatString CHARACTER) BEGIN
		DECLARE fieldName CHARACTER;
		DECLARE fieldValue CHARACTER;
		DECLARE cursor REFERENCE TO root;
		MOVE cursor FIRSTCHILD;
		WHILE LASTMOVE(cursor) Do
		SET fieldName = FIELDNAME(cursor);
		SET fieldValue = FIELDVALUE(cursor);
		if LOWER(fieldName)='channelid' OR fieldName='Channeld' THEN SET Environment.Variables.ChannelId=fieldValue; END IF;
		IF (fieldValue is not null) THEN
		SET  concatString  =  concatString  ||'<'||fieldName||'>' ||fieldValue||'</'||fieldName||'>';
		ELSE
		SET  concatString  =  concatString  ||'<'||fieldName||'>';
		CALL ComposeDetails(cursor, concatString  );
		SET  concatString  =  concatString  ||'</'||fieldName||'>';
		END IF;
		MOVE cursor NEXTSIBLING;
		END WHILE;  
	END;
	
END MODULE;
